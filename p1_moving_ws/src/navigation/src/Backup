#include <algorithm>
#include <ros/ros.h>
#include <actionlib/client/simple_action_client.h>
#include <actionlib/client/simple_client_goal_state.h>
#include <geometry_msgs/PointStamped.h>
#include <move_base_msgs/MoveBaseAction.h>
#include <visualization_msgs/Marker.h>
#include <visualization_msgs/MarkerArray.h>
#include "std_msgs/String.h"
#include <iostream>


class Route
{
private:
    unsigned int stops_initialized;
    geometry_msgs::PointStamped zero, pointA, pointB, pointC, pointD, pointE, pointF;
    actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> client;
    visualization_msgs::MarkerArray marker_array;
    ros::Publisher marker_pub;
    ros::Subscriber click_sub;
    ros::Subscriber chatter_sub;


    void _send_goal(const geometry_msgs::PointStamped& goal_point)
    {
        move_base_msgs::MoveBaseGoal goal;
        goal.target_pose.header.frame_id = goal_point.header.frame_id;
        goal.target_pose.pose.position = goal_point.point;
        goal.target_pose.pose.orientation.z = 1;
        client.sendGoal(goal,
        boost::bind(&Route::_target_reached_cb, this, _1, _2));
        //_send_markers();
    }

    void _target_reached_cb(const actionlib::SimpleClientGoalState& state, const move_base_msgs::MoveBaseResultConstPtr& result)
    {
        _send_goal(zero);
    }

    void _create_marker(double red, double green, double blue, double alpha, bool down, int id, geometry_msgs::PointStamped marker_name)
    {
        visualization_msgs::Marker marker; //Create marker object
        marker.header.stamp = ros::Time::now();
        marker.ns = "bus_stops";
        marker.type = visualization_msgs::Marker::ARROW;
        marker.action = visualization_msgs::Marker::ADD;

        marker.scale.x = 1.0;
        marker.scale.y = 0.2;
        marker.scale.z = 0.2;
        
        marker.color.r = red;
        marker.color.g = green;
        marker.color.b = blue;
        marker.color.a = alpha;
        
        marker.pose.orientation.x = 0;
        marker.pose.orientation.y = 0.7071;
        marker.pose.orientation.z = 0;
        marker.pose.orientation.w = -0.7071;
        
        marker.lifetime = ros::Duration();

        marker.header.frame_id = marker_name.header.frame_id;
        marker.id = id;
        
        marker.pose.position = marker_name.point;

        if(down)
        {
            marker.pose.position.z += marker.scale.x; //Moves arrow above ground
            marker.pose.orientation.w = 0.7071;
        }

        marker_array.markers.push_back(marker); //Push the marker object to the array of markers
    }

    void _send_markers()
    {
        /*
        visualization_msgs::Marker marker;
        marker.header.stamp = ros::Time::now();
        marker.ns = "bus_stops";
        marker.type = visualization_msgs::Marker::ARROW;
        marker.action = visualization_msgs::Marker::ADD;
        marker.scale.x = 1.0;
        marker.scale.y = 0.2;
        marker.scale.z = 0.2;
        marker.color.r = 0.0;
        marker.color.g = 1.0;
        marker.color.b = 0.0;
        marker.color.a = 1.0;
        marker.pose.orientation.x = 0;
        marker.pose.orientation.y = 0.7071;
        marker.pose.orientation.z = 0;
        marker.pose.orientation.w = 0.7071;
        marker.lifetime = ros::Duration();
        */
        //visualization_msgs::MarkerArray marker_array;
        if (stops_initialized == 0)
        {
            /*
            marker.header.frame_id = zero.header.frame_id;
            marker.id = 0;
            marker.color.r = 1.0;
            marker.color.g = 1.0;
            marker.color.b = 1.0;
            marker.color.a = 1.0;
            marker.pose.position = zero.point;
            marker.pose.position.z += marker.scale.x;
            marker_array.markers.push_back(marker);
            
            double test = 1.0;
            bool down = true;
            int id = 0;
            */
            _create_marker(1, 1, 1, 1, true, stops_initialized, zero);        

        }
        if (stops_initialized > 1)
        {
            /* marker.header.frame_id = pointA.header.frame_id;
            int id = 1;
            marker.color.r = 1.0;
            marker.color.g = 0.0;
            marker.color.b = 0.0;
            marker.color.a = 1.0;
            marker.pose.position = pointA.point;
            marker.pose.orientation.w = -0.7071;
            marker_array.markers.push_back(marker); */
            _create_marker(1, 0, 0, 1, false, 1, pointA); 

        }
        if (stops_initialized > 2)
        {
            /*
            marker.header.frame_id = pointB.header.frame_id;
            marker.id = 2;
            marker.color.r = 0.0;
            marker.color.g = 1.0;
            marker.color.b = 0.0;
            marker.color.a = 1.0;
            marker.pose.position = pointB.point;
            marker.pose.orientation.w = -0.7071;
            marker_array.markers.push_back(marker);
            */
            _create_marker(0, 1, 0, 1, false, 2, pointB); 
        }
        if (stops_initialized > 3)
        {
            /*
            marker.header.frame_id = pointC.header.frame_id;
            marker.id = 3;
            marker.color.r = 0.0;
            marker.color.g = 0.0;
            marker.color.b = 1.0;
            marker.color.a = 1.0;
            marker.pose.position = pointC.point;
            marker.pose.orientation.w = -0.7071;
            marker_array.markers.push_back(marker);
            */
            _create_marker(0, 0, 1, 1, false, 3, pointC); 
        }
        /*
        if (stops_initialized > 4)
        {
            _create_marker(0.6,0,0.30,1, false, 4, pointD)
        }
        if (stops_initialized > 5)
        {
            _create_marker(0.6,0,0.30,1, false, 4, pointD)
        }
        if (stops_initialized > 6)
        {
            _create_marker(0.6,0,0.30,1, false, 4, pointD)
        }
        */
        marker_pub.publish(marker_array);
    }

    void _clicked_point_cb(const geometry_msgs::PointStamped::ConstPtr& msg)
    {
        ROS_INFO("Clicked: %f, %f, %f", msg->point.x,
            msg->point.y, msg->point.z);
        if (stops_initialized == 0)
        {
            zero = *msg;
            ROS_INFO("Changed the zero");
            _send_markers();
        }
        if (stops_initialized == 1)
        {
            pointA = *msg;
            ROS_INFO("Changed the point A");
        }
        if (stops_initialized == 2)
        {
            pointB = *msg;
            ROS_INFO("Changed the point B");
        }
        if (stops_initialized == 3)
        {
            pointC = *msg;
            ROS_INFO("Changed the point C");
        }

        stops_initialized += 1;
        _send_markers();

    }

    void _listener_cb(const std_msgs::String::ConstPtr& msg2)
    {
        ROS_INFO("I heard : [%s]", msg2->data.c_str());
        std_msgs::String userinput = *msg2;
        std::cout << userinput;
        
        if (msg2->data == "pointA")
        {
            ROS_INFO("Setting goal to A");
            _send_goal(pointA);
        }
        if (msg2->data == "pointB")
        {
            ROS_INFO("Setting goal to B");
            _send_goal(pointB);
        }
        if (msg2->data == "pointC")
        {
            ROS_INFO("Setting goal to C");
            _send_goal(pointC);
        }
    }
    

public:
    Route() :
        client("move_base"), stops_initialized(0)
    {
        ros::NodeHandle n;
        marker_pub = n.advertise<visualization_msgs::MarkerArray>(
            "visualization_marker_array", 1);
        click_sub = n.subscribe( "clicked_point", 100,
            &Route::_clicked_point_cb, this);
        chatter_sub = n.subscribe( "chatter", 10, &Route::_listener_cb, this);
    };
    ~Route(){};

};

// This is where we start
int main(int argc, char *argv[])
{
    ros::init(argc, argv, "busroute");

    Route r;
    
    ros::spin();
    return 0;
}

